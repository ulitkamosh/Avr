
uarts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00000840  000008d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b7  00800192  00800192  00000a06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f67  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005db  00000000  00000000  00001a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082e  00000000  00000000  0000202a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ed  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a26  00000000  00000000  00002db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000037df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4a c0       	rjmp	.+148    	; 0x96 <__ctors_end>
   2:	64 c0       	rjmp	.+200    	; 0xcc <__bad_interrupt>
   4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
   6:	62 c0       	rjmp	.+196    	; 0xcc <__bad_interrupt>
   8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
   a:	60 c0       	rjmp	.+192    	; 0xcc <__bad_interrupt>
   c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
   e:	5e c0       	rjmp	.+188    	; 0xcc <__bad_interrupt>
  10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
  12:	4b c2       	rjmp	.+1174   	; 0x4aa <__vector_9>
  14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
  16:	5a c0       	rjmp	.+180    	; 0xcc <__bad_interrupt>
  18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
  1a:	58 c0       	rjmp	.+176    	; 0xcc <__bad_interrupt>
  1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
  1e:	56 c0       	rjmp	.+172    	; 0xcc <__bad_interrupt>
  20:	55 c0       	rjmp	.+170    	; 0xcc <__bad_interrupt>
  22:	a4 c3       	rjmp	.+1864   	; 0x76c <main+0xd6>
  24:	a7 c3       	rjmp	.+1870   	; 0x774 <main+0xde>
  26:	aa c3       	rjmp	.+1876   	; 0x77c <main+0xe6>
  28:	ad c3       	rjmp	.+1882   	; 0x784 <main+0xee>
  2a:	b0 c3       	rjmp	.+1888   	; 0x78c <main+0xf6>
  2c:	b3 c3       	rjmp	.+1894   	; 0x794 <main+0xfe>
  2e:	b6 c3       	rjmp	.+1900   	; 0x79c <main+0x106>
  30:	b9 c3       	rjmp	.+1906   	; 0x7a4 <main+0x10e>

00000032 <__trampolines_end>:
  32:	00 00       	nop
  34:	b8 0e       	add	r11, r24
  36:	1c 0d       	add	r17, r12
  38:	ae 0b       	sbc	r26, r30
  3a:	06 0b       	sbc	r16, r22
  3c:	d2 09       	sbc	r29, r2
  3e:	c0 08       	sbc	r12, r0
  40:	cc 07       	cpc	r28, r28
  42:	5c 07       	cpc	r21, r28
  44:	8e 06       	cpc	r8, r30
  46:	d7 05       	cpc	r29, r7
  48:	83 05       	cpc	r24, r3
  4a:	e9 04       	cpc	r14, r9
  4c:	60 04       	cpc	r6, r0
  4e:	e6 03       	fmuls	r22, r22
  50:	ae 03       	fmulsu	r18, r22
  52:	47 03       	mulsu	r20, r23

00000054 <tabkd>:
  54:	00 00 8c 12 80 11 84 10 98 0f b8 0e e4 0d 1c 0d     ................
  64:	60 0c ae 0b 06 0b 68 0a d2 09 46 09 c0 08 42 08     `.....h...F...B.
  74:	cc 07 5c 07 f2 06 8e 06 30 06 d7 05 83 05 34 05     ..\.....0.....4.
  84:	e9 04 a3 04 60 04 21 04 e6 03 ae 03 79 03 47 03     ....`.!.....y.G.
  94:	18 03                                               ..

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf e5       	ldi	r28, 0x5F	; 95
  9c:	d2 e0       	ldi	r29, 0x02	; 2
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
  a2:	11 e0       	ldi	r17, 0x01	; 1
  a4:	a0 e6       	ldi	r26, 0x60	; 96
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e0 e4       	ldi	r30, 0x40	; 64
  aa:	f8 e0       	ldi	r31, 0x08	; 8
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 39       	cpi	r26, 0x92	; 146
  b4:	b1 07       	cpc	r27, r17
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	a2 e9       	ldi	r26, 0x92	; 146
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a9 34       	cpi	r26, 0x49	; 73
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	e6 d2       	rcall	.+1484   	; 0x696 <main>
  ca:	b8 c3       	rjmp	.+1904   	; 0x83c <_exit>

000000cc <__bad_interrupt>:
  cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <USART_ini>:
#include "usart.h"

void USART_ini (unsigned int speed)
{
	UBRRH = (unsigned char) (speed>>8);
  ce:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) speed;
  d0:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN); //включаем прием и передачу по usart
  d2:	88 e1       	ldi	r24, 0x18	; 24
  d4:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1<<RXCIE); //разрешаем прерывания при приеме
  d6:	57 9a       	sbi	0x0a, 7	; 10
	//UCSRA |= (1<<U2X); //удвоение частоты
	UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0); // обращаемся к регистру UCSRC (URSEL=1), ассинхронный режим (UNSEL=0),
  d8:	86 e8       	ldi	r24, 0x86	; 134
  da:	80 bd       	out	0x20, r24	; 32
  dc:	08 95       	ret

000000de <USART_Send_Char>:
	// без контроля четности (UPM1=0 UPM0=0), 2стоп -бита (USBS=1), 8битовая посылка (UCSZ1=1 и UCZ0=1)
}

void USART_Send_Char (unsigned char data)
{
	while(!(UCSRA&(1<<UDRE)));  
  de:	5d 9b       	sbis	0x0b, 5	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <USART_Send_Char>
	UDR = data; //начнем передавать данные, но только убедившись в том что буфер пуст
  e2:	8c b9       	out	0x0c, r24	; 12
  e4:	08 95       	ret

000000e6 <USART_Send_Str>:
}

void USART_Send_Str(char str[])
{
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	8c 01       	movw	r16, r24
	unsigned char i = 0;
	USART_Send_Char(0x0d);
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	f6 df       	rcall	.-20     	; 0xde <USART_Send_Char>
	while (str[i]!='\0')
  f2:	f8 01       	movw	r30, r16
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	49 f0       	breq	.+18     	; 0x10c <USART_Send_Str+0x26>
  fa:	c0 e0       	ldi	r28, 0x00	; 0
	{
		USART_Send_Char(str[i]);
  fc:	f0 df       	rcall	.-32     	; 0xde <USART_Send_Char>
		i++;
  fe:	cf 5f       	subi	r28, 0xFF	; 255

void USART_Send_Str(char str[])
{
	unsigned char i = 0;
	USART_Send_Char(0x0d);
	while (str[i]!='\0')
 100:	f8 01       	movw	r30, r16
 102:	ec 0f       	add	r30, r28
 104:	f1 1d       	adc	r31, r1
 106:	80 81       	ld	r24, Z
 108:	81 11       	cpse	r24, r1
 10a:	f8 cf       	rjmp	.-16     	; 0xfc <USART_Send_Str+0x16>
	{
		USART_Send_Char(str[i]);
		i++;
	}
	USART_Send_Char(0x0d);
 10c:	8d e0       	ldi	r24, 0x0D	; 13
 10e:	e7 df       	rcall	.-50     	; 0xde <USART_Send_Char>
}
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	08 95       	ret

00000118 <ChangeTempo>:
unsigned int oct=0;

void ChangeTempo(int t)
{
  
	if (t == 0){
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	c1 f4       	brne	.+48     	; 0x14c <ChangeTempo+0x34>
		if (tempo<4) {tempo=tempo+1; PORTA=0x08;_delay_ms(500);}
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	84 30       	cpi	r24, 0x04	; 4
 126:	91 05       	cpc	r25, r1
 128:	50 f5       	brcc	.+84     	; 0x17e <ChangeTempo+0x66>
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 130:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f e9       	ldi	r18, 0x9F	; 159
 13a:	86 e8       	ldi	r24, 0x86	; 134
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <ChangeTempo+0x26>
 146:	00 c0       	rjmp	.+0      	; 0x148 <ChangeTempo+0x30>
 148:	00 00       	nop
 14a:	08 95       	ret
		}
	if (t == 1){
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	b9 f4       	brne	.+46     	; 0x17e <ChangeTempo+0x66>
		if (tempo>1){tempo=tempo-1;PORTA=0x04;_delay_ms(500);}
 150:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 154:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	91 05       	cpc	r25, r1
 15c:	80 f0       	brcs	.+32     	; 0x17e <ChangeTempo+0x66>
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 164:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	8b bb       	out	0x1b, r24	; 27
 16c:	2f e9       	ldi	r18, 0x9F	; 159
 16e:	86 e8       	ldi	r24, 0x86	; 134
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <ChangeTempo+0x5a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <ChangeTempo+0x64>
 17c:	00 00       	nop
 17e:	08 95       	ret

00000180 <ChangeOctave>:
		}
}

void ChangeOctave(int o)
{
	if (o == 0){
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	c1 f4       	brne	.+48     	; 0x1b4 <ChangeOctave+0x34>
		if (oct<7) {oct=oct+7; PORTA=0x08;_delay_ms(500);}
 184:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <oct>
 188:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <oct+0x1>
 18c:	87 30       	cpi	r24, 0x07	; 7
 18e:	91 05       	cpc	r25, r1
 190:	50 f5       	brcc	.+84     	; 0x1e6 <ChangeOctave+0x66>
 192:	07 96       	adiw	r24, 0x07	; 7
 194:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <oct+0x1>
 198:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <oct>
 19c:	88 e0       	ldi	r24, 0x08	; 8
 19e:	8b bb       	out	0x1b, r24	; 27
 1a0:	2f e9       	ldi	r18, 0x9F	; 159
 1a2:	86 e8       	ldi	r24, 0x86	; 134
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <ChangeOctave+0x26>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <ChangeOctave+0x30>
 1b0:	00 00       	nop
 1b2:	08 95       	ret
	}
	if (o == 1){
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	b9 f4       	brne	.+46     	; 0x1e6 <ChangeOctave+0x66>
		if (oct>6) {oct=oct-7;PORTA=0x04;_delay_ms(500);}
 1b8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <oct>
 1bc:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <oct+0x1>
 1c0:	87 30       	cpi	r24, 0x07	; 7
 1c2:	91 05       	cpc	r25, r1
 1c4:	80 f0       	brcs	.+32     	; 0x1e6 <ChangeOctave+0x66>
 1c6:	07 97       	sbiw	r24, 0x07	; 7
 1c8:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <oct+0x1>
 1cc:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <oct>
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	2f e9       	ldi	r18, 0x9F	; 159
 1d6:	86 e8       	ldi	r24, 0x86	; 134
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <ChangeOctave+0x5a>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <ChangeOctave+0x64>
 1e4:	00 00       	nop
 1e6:	08 95       	ret

000001e8 <SaveBuff>:
	}
}

void SaveBuff(int g)
{
 1e8:	af 92       	push	r10
 1ea:	bf 92       	push	r11
 1ec:	cf 92       	push	r12
 1ee:	df 92       	push	r13
 1f0:	ef 92       	push	r14
 1f2:	ff 92       	push	r15
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <SaveBuff+0x16>
 1fe:	1f 92       	push	r1
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	7c 01       	movw	r14, r24
	int z;
	int nt=0;
	int tempp=0;
	unsigned char bufferstr[3];
	char *uk=&bufferstr[0];
	USART_Send_Char((unsigned char) g);
 206:	6b df       	rcall	.-298    	; 0xde <USART_Send_Char>
	g=g+3;
 208:	83 e0       	ldi	r24, 0x03	; 3
 20a:	e8 0e       	add	r14, r24
 20c:	f1 1c       	adc	r15, r1
	for (b=0; b<=g; b++)
 20e:	ff 20       	and	r15, r15
 210:	0c f4       	brge	.+2      	; 0x214 <SaveBuff+0x2c>
 212:	47 c0       	rjmp	.+142    	; 0x2a2 <__stack+0x43>
 				bufferstr[z]=buffermel[(b+z)];
				
			}
			b=b+4;
			tempp=atoi(uk);
			if (buf == 0){
 214:	c0 90 9a 01 	lds	r12, 0x019A	; 0x80019a <buf>
 218:	d0 90 9b 01 	lds	r13, 0x019B	; 0x80019b <buf+0x1>
 21c:	a1 2c       	mov	r10, r1
 21e:	b1 2c       	mov	r11, r1
 220:	00 e0       	ldi	r16, 0x00	; 0
 222:	10 e0       	ldi	r17, 0x00	; 0
	char *uk=&bufferstr[0];
	USART_Send_Char((unsigned char) g);
	g=g+3;
	for (b=0; b<=g; b++)
	{
		if (buffermel[b]==',')
 224:	f8 01       	movw	r30, r16
 226:	e0 55       	subi	r30, 0x50	; 80
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	90 81       	ld	r25, Z
 22c:	9c 32       	cpi	r25, 0x2C	; 44
 22e:	99 f5       	brne	.+102    	; 0x296 <__stack+0x37>
		{	
			b=b-3;
			
 			for (z=0; z<3; z++)
 			{
 				bufferstr[z]=buffermel[(b+z)];
 230:	33 97       	sbiw	r30, 0x03	; 3
 232:	20 81       	ld	r18, Z
 234:	29 83       	std	Y+1, r18	; 0x01
 236:	31 96       	adiw	r30, 0x01	; 1
 238:	20 81       	ld	r18, Z
 23a:	2a 83       	std	Y+2, r18	; 0x02
 23c:	31 96       	adiw	r30, 0x01	; 1
 23e:	80 81       	ld	r24, Z
 240:	8b 83       	std	Y+3, r24	; 0x03
				
			}
			b=b+4;
 242:	0f 5f       	subi	r16, 0xFF	; 255
 244:	1f 4f       	sbci	r17, 0xFF	; 255
			tempp=atoi(uk);
 246:	ce 01       	movw	r24, r28
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	d3 d2       	rcall	.+1446   	; 0x7f2 <atoi>
			if (buf == 0){
 24c:	c1 14       	cp	r12, r1
 24e:	d1 04       	cpc	r13, r1
 250:	29 f4       	brne	.+10     	; 0x25c <SaveBuff+0x74>

					mel4[nt] =(char) tempp;
 252:	f5 01       	movw	r30, r10
 254:	eb 5c       	subi	r30, 0xCB	; 203
 256:	fd 4f       	sbci	r31, 0xFD	; 253
 258:	80 83       	st	Z, r24
 25a:	12 c0       	rjmp	.+36     	; 0x280 <__stack+0x21>
				}
			if (buf == 1)
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	c9 16       	cp	r12, r25
 260:	d1 04       	cpc	r13, r1
 262:	29 f4       	brne	.+10     	; 0x26e <__stack+0xf>
				{
					mel5[nt] =(char) tempp;
 264:	f5 01       	movw	r30, r10
 266:	ea 5e       	subi	r30, 0xEA	; 234
 268:	fd 4f       	sbci	r31, 0xFD	; 253
 26a:	80 83       	st	Z, r24
 26c:	11 c0       	rjmp	.+34     	; 0x290 <__stack+0x31>
				}
			if (buf == 2)
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	c9 16       	cp	r12, r25
 272:	d1 04       	cpc	r13, r1
 274:	29 f4       	brne	.+10     	; 0x280 <__stack+0x21>
				{
					mel6[nt] =(char) tempp;
 276:	f5 01       	movw	r30, r10
 278:	e4 56       	subi	r30, 0x64	; 100
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	80 83       	st	Z, r24
 27e:	08 c0       	rjmp	.+16     	; 0x290 <__stack+0x31>
				}
			if (buf == 3)
 280:	93 e0       	ldi	r25, 0x03	; 3
 282:	c9 16       	cp	r12, r25
 284:	d1 04       	cpc	r13, r1
 286:	21 f4       	brne	.+8      	; 0x290 <__stack+0x31>
				{
					mel7[nt] =(char) tempp;
 288:	f5 01       	movw	r30, r10
 28a:	e5 5d       	subi	r30, 0xD5	; 213
 28c:	fd 4f       	sbci	r31, 0xFD	; 253
 28e:	80 83       	st	Z, r24
				}
			nt++;
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	a8 1a       	sub	r10, r24
 294:	b8 0a       	sbc	r11, r24
	int tempp=0;
	unsigned char bufferstr[3];
	char *uk=&bufferstr[0];
	USART_Send_Char((unsigned char) g);
	g=g+3;
	for (b=0; b<=g; b++)
 296:	0f 5f       	subi	r16, 0xFF	; 255
 298:	1f 4f       	sbci	r17, 0xFF	; 255
 29a:	e0 16       	cp	r14, r16
 29c:	f1 06       	cpc	r15, r17
 29e:	14 f6       	brge	.-124    	; 0x224 <SaveBuff+0x3c>
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <__stack+0x47>

void SaveBuff(int g)
{
	int b;
	int z;
	int nt=0;
 2a2:	a1 2c       	mov	r10, r1
 2a4:	b1 2c       	mov	r11, r1
				}
			nt++;
		}
	}

	switch (buf)
 2a6:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <buf>
 2aa:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <buf+0x1>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	91 05       	cpc	r25, r1
 2b2:	99 f0       	breq	.+38     	; 0x2da <__stack+0x7b>
 2b4:	1c f4       	brge	.+6      	; 0x2bc <__stack+0x5d>
 2b6:	89 2b       	or	r24, r25
 2b8:	39 f0       	breq	.+14     	; 0x2c8 <__stack+0x69>
 2ba:	29 c0       	rjmp	.+82     	; 0x30e <__stack+0xaf>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	91 05       	cpc	r25, r1
 2c0:	a9 f0       	breq	.+42     	; 0x2ec <__stack+0x8d>
 2c2:	03 97       	sbiw	r24, 0x03	; 3
 2c4:	e1 f0       	breq	.+56     	; 0x2fe <__stack+0x9f>
 2c6:	23 c0       	rjmp	.+70     	; 0x30e <__stack+0xaf>
	{
		case 0:
		{
			mel4[nt]=0xFF;
 2c8:	f5 01       	movw	r30, r10
 2ca:	eb 5c       	subi	r30, 0xCB	; 203
 2cc:	fd 4f       	sbci	r31, 0xFD	; 253
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	80 83       	st	Z, r24
			USART_Send_Str("melody is on PB4");
 2d2:	82 e6       	ldi	r24, 0x62	; 98
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	07 df       	rcall	.-498    	; 0xe6 <USART_Send_Str>
		}
		break;
 2d8:	1a c0       	rjmp	.+52     	; 0x30e <__stack+0xaf>
		case 1:
		{
			mel5[nt]=0xFF;
 2da:	f5 01       	movw	r30, r10
 2dc:	ea 5e       	subi	r30, 0xEA	; 234
 2de:	fd 4f       	sbci	r31, 0xFD	; 253
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	80 83       	st	Z, r24
			USART_Send_Str("melody is on PB5");
 2e4:	83 e7       	ldi	r24, 0x73	; 115
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fe de       	rcall	.-516    	; 0xe6 <USART_Send_Str>
		}
		break;
 2ea:	11 c0       	rjmp	.+34     	; 0x30e <__stack+0xaf>
		case 2:
		{
			mel6[nt]=0xFF;
 2ec:	f5 01       	movw	r30, r10
 2ee:	e4 56       	subi	r30, 0x64	; 100
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	80 83       	st	Z, r24
			USART_Send_Str("melody is on PB6");
 2f6:	84 e8       	ldi	r24, 0x84	; 132
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	f5 de       	rcall	.-534    	; 0xe6 <USART_Send_Str>
		}
		break;
 2fc:	08 c0       	rjmp	.+16     	; 0x30e <__stack+0xaf>
		case 3:
		{
			mel7[nt]=0xFF;
 2fe:	f5 01       	movw	r30, r10
 300:	e5 5d       	subi	r30, 0xD5	; 213
 302:	fd 4f       	sbci	r31, 0xFD	; 253
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	80 83       	st	Z, r24
			USART_Send_Str("melody is on PB7");
 308:	85 e9       	ldi	r24, 0x95	; 149
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	ec de       	rcall	.-552    	; 0xe6 <USART_Send_Str>
		}
		break;
	}

	buf++;
 30e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <buf>
 312:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <buf+0x1>
 316:	01 96       	adiw	r24, 0x01	; 1
	if (buf==4)
 318:	84 30       	cpi	r24, 0x04	; 4
 31a:	91 05       	cpc	r25, r1
 31c:	29 f0       	breq	.+10     	; 0x328 <__stack+0xc9>
			USART_Send_Str("melody is on PB7");
		}
		break;
	}

	buf++;
 31e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <buf+0x1>
 322:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <buf>
 326:	04 c0       	rjmp	.+8      	; 0x330 <__stack+0xd1>
	if (buf==4)
	{
		buf=0;
 328:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <buf+0x1>
 32c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <buf>
	}
	
}
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	bf 90       	pop	r11
 348:	af 90       	pop	r10
 34a:	08 95       	ret

0000034c <Play>:

void Play(int nota)
{
	if (pgm_read_word_near(&tabkd1[nota]) != NULL)	{ 
 34c:	fc 01       	movw	r30, r24
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	ee 5c       	subi	r30, 0xCE	; 206
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	25 91       	lpm	r18, Z+
 358:	34 91       	lpm	r19, Z
 35a:	23 2b       	or	r18, r19
 35c:	d1 f0       	breq	.+52     	; 0x392 <Play+0x46>
		TCCR1A=0x00;
 35e:	1f bc       	out	0x2f, r1	; 47
		TCCR1B=0x09;
 360:	29 e0       	ldi	r18, 0x09	; 9
 362:	2e bd       	out	0x2e, r18	; 46
		nota = nota + oct;
 364:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <oct>
 368:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <oct+0x1>
 36c:	e8 0f       	add	r30, r24
 36e:	f9 1f       	adc	r31, r25
		OCR1A= (pgm_read_word_near(&tabkd1[nota]));
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	ee 5c       	subi	r30, 0xCE	; 206
 376:	ff 4f       	sbci	r31, 0xFF	; 255
 378:	85 91       	lpm	r24, Z+
 37a:	94 91       	lpm	r25, Z
 37c:	9b bd       	out	0x2b, r25	; 43
 37e:	8a bd       	out	0x2a, r24	; 42
		TCCR1A=0x40;
 380:	80 e4       	ldi	r24, 0x40	; 64
 382:	8f bd       	out	0x2f, r24	; 47
 384:	8f e4       	ldi	r24, 0x4F	; 79
 386:	93 ec       	ldi	r25, 0xC3	; 195
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <Play+0x3c>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <Play+0x42>
 38e:	00 00       	nop
		_delay_ms(200);
		TCCR1A=0x00;
 390:	1f bc       	out	0x2f, r1	; 47
 392:	08 95       	ret

00000394 <PlayMel>:
	}
}


void PlayMel(unsigned char *mel)
{
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	7c 01       	movw	r14, r24
	unsigned char fnota;
	unsigned char dnota;
	unsigned char *nota;

	TCCR1A=0x00;
 3a2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x09;
 3a4:	89 e0       	ldi	r24, 0x09	; 9
 3a6:	8e bd       	out	0x2e, r24	; 46
		if (*nota==0xFF) goto m3;
		fnota = (*nota)&0x1F;
		dnota = ((*nota)>>5)&0x07;
		if (fnota==0) goto m5;
		OCR1A = (pgm_read_word_near(&tabkd[fnota]));
		TCCR1A=0x40;
 3a8:	40 e4       	ldi	r20, 0x40	; 64
		m5:	for (int i = 0; i < (2*tabz[dnota]/tempo); i++)
		{
			_delay_ms(10);
		}
		TCCR1A=0x00;
		for (int i = 0; i < (2*tabz[0]/tempo); i++)
 3aa:	c8 e0       	ldi	r28, 0x08	; 8
 3ac:	d0 e0       	ldi	r29, 0x00	; 0
	TCCR1B=0x09;


	
		m3:	nota = mel;
		m4:	if (PINB==0xFF) goto m2;
 3ae:	86 b3       	in	r24, 0x16	; 22
 3b0:	8f 3f       	cpi	r24, 0xFF	; 255
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <PlayMel+0x22>
 3b4:	67 c0       	rjmp	.+206    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
		if (*nota==0xFF) goto m3;
 3b6:	d7 01       	movw	r26, r14
 3b8:	ec 91       	ld	r30, X
 3ba:	ef 3f       	cpi	r30, 0xFF	; 255
 3bc:	39 f4       	brne	.+14     	; 0x3cc <PlayMel+0x38>
 3be:	f7 cf       	rjmp	.-18     	; 0x3ae <PlayMel+0x1a>
 3c0:	d8 01       	movw	r26, r16
 3c2:	ed 91       	ld	r30, X+
 3c4:	8d 01       	movw	r16, r26
 3c6:	ef 3f       	cpi	r30, 0xFF	; 255
 3c8:	21 f4       	brne	.+8      	; 0x3d2 <PlayMel+0x3e>
 3ca:	f1 cf       	rjmp	.-30     	; 0x3ae <PlayMel+0x1a>
 3cc:	87 01       	movw	r16, r14
 3ce:	0f 5f       	subi	r16, 0xFF	; 255
 3d0:	1f 4f       	sbci	r17, 0xFF	; 255
		fnota = (*nota)&0x1F;
 3d2:	9e 2f       	mov	r25, r30
 3d4:	9f 71       	andi	r25, 0x1F	; 31
		dnota = ((*nota)>>5)&0x07;
 3d6:	8e 2f       	mov	r24, r30
 3d8:	82 95       	swap	r24
 3da:	86 95       	lsr	r24
 3dc:	87 70       	andi	r24, 0x07	; 7
		if (fnota==0) goto m5;
 3de:	99 23       	and	r25, r25
 3e0:	59 f0       	breq	.+22     	; 0x3f8 <PlayMel+0x64>
		OCR1A = (pgm_read_word_near(&tabkd[fnota]));
 3e2:	e9 2f       	mov	r30, r25
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	ec 5a       	subi	r30, 0xAC	; 172
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	25 91       	lpm	r18, Z+
 3f0:	34 91       	lpm	r19, Z
 3f2:	3b bd       	out	0x2b, r19	; 43
 3f4:	2a bd       	out	0x2a, r18	; 42
		TCCR1A=0x40;
 3f6:	4f bd       	out	0x2f, r20	; 47
		m5:	for (int i = 0; i < (2*tabz[dnota]/tempo); i++)
 3f8:	e8 2f       	mov	r30, r24
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	ed 57       	subi	r30, 0x7D	; 125
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	01 90       	ld	r0, Z+
 406:	f0 81       	ld	r31, Z
 408:	e0 2d       	mov	r30, r0
 40a:	ee 0f       	add	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 412:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 416:	cf 01       	movw	r24, r30
 418:	d8 d1       	rcall	.+944    	; 0x7ca <__udivmodhi4>
 41a:	67 2b       	or	r22, r23
 41c:	99 f0       	breq	.+38     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	83 ec       	ldi	r24, 0xC3	; 195
 424:	99 e0       	ldi	r25, 0x09	; 9
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
 42e:	2f 5f       	subi	r18, 0xFF	; 255
 430:	3f 4f       	sbci	r19, 0xFF	; 255
 432:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 436:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 43a:	cf 01       	movw	r24, r30
 43c:	c6 d1       	rcall	.+908    	; 0x7ca <__udivmodhi4>
 43e:	26 17       	cp	r18, r22
 440:	37 07       	cpc	r19, r23
 442:	78 f3       	brcs	.-34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			_delay_ms(10);
		}
		TCCR1A=0x00;
 444:	1f bc       	out	0x2f, r1	; 47
		for (int i = 0; i < (2*tabz[0]/tempo); i++)
 446:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 44a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 44e:	ce 01       	movw	r24, r28
 450:	bc d1       	rcall	.+888    	; 0x7ca <__udivmodhi4>
 452:	67 2b       	or	r22, r23
 454:	99 f0       	breq	.+38     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	a3 ec       	ldi	r26, 0xC3	; 195
 45c:	b9 e0       	ldi	r27, 0x09	; 9
 45e:	11 97       	sbiw	r26, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 464:	00 00       	nop
 466:	2f 5f       	subi	r18, 0xFF	; 255
 468:	3f 4f       	sbci	r19, 0xFF	; 255
 46a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 46e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 472:	ce 01       	movw	r24, r28
 474:	aa d1       	rcall	.+852    	; 0x7ca <__udivmodhi4>
 476:	26 17       	cp	r18, r22
 478:	37 07       	cpc	r19, r23
 47a:	78 f3       	brcs	.-34     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	TCCR1B=0x09;


	
		m3:	nota = mel;
		m4:	if (PINB==0xFF) goto m2;
 47c:	86 b3       	in	r24, 0x16	; 22
 47e:	8f 3f       	cpi	r24, 0xFF	; 255
 480:	09 f0       	breq	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 482:	9e cf       	rjmp	.-196    	; 0x3c0 <PlayMel+0x2c>
		{
			_delay_ms(10);
		};
		nota++;
		goto m4;
	m2:TCCR1A=0x00;
 484:	1f bc       	out	0x2f, r1	; 47
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	08 95       	ret

00000494 <port_ini>:
int n=0;

void port_ini(void)
{

	DDRA=0x0F;
 494:	8f e0       	ldi	r24, 0x0F	; 15
 496:	8a bb       	out	0x1a, r24	; 26

	PORTD=0x00;
 498:	12 ba       	out	0x12, r1	; 18
	DDRD=0x20;
 49a:	80 e2       	ldi	r24, 0x20	; 32
 49c:	81 bb       	out	0x11, r24	; 17

	PORTB=0xFF;
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	88 bb       	out	0x18, r24	; 24
	DDRB=0x00;
 4a2:	17 ba       	out	0x17, r1	; 23

	PORTC=0xFF;
 4a4:	85 bb       	out	0x15, r24	; 21
	DDRC=0x00;
 4a6:	14 ba       	out	0x14, r1	; 20
 4a8:	08 95       	ret

000004aa <__vector_9>:
}

ISR(USART_RX_vect)
{
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	4f 93       	push	r20
 4ba:	5f 93       	push	r21
 4bc:	6f 93       	push	r22
 4be:	7f 93       	push	r23
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
	data = UDR;
 4cc:	8c b1       	in	r24, 0x0c	; 12
 4ce:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <data>

	if ((data=='1')||(data=='2')||(data=='3')||(data=='4')||(data=='5')||(data=='6')||(data=='7')||(data=='8')||(data=='9')||(data=='0')||(data==',')||(data=='p')||(data=='d')){
 4d2:	90 ed       	ldi	r25, 0xD0	; 208
 4d4:	98 0f       	add	r25, r24
 4d6:	9a 30       	cpi	r25, 0x0A	; 10
 4d8:	38 f0       	brcs	.+14     	; 0x4e8 <__vector_9+0x3e>
 4da:	8c 32       	cpi	r24, 0x2C	; 44
 4dc:	29 f0       	breq	.+10     	; 0x4e8 <__vector_9+0x3e>
 4de:	80 37       	cpi	r24, 0x70	; 112
 4e0:	19 f0       	breq	.+6      	; 0x4e8 <__vector_9+0x3e>
 4e2:	84 36       	cpi	r24, 0x64	; 100
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <__vector_9+0x3e>
 4e6:	c0 c0       	rjmp	.+384    	; 0x668 <__vector_9+0x1be>
		if (mode==1)
 4e8:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <mode>
 4ec:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <mode+0x1>
 4f0:	21 30       	cpi	r18, 0x01	; 1
 4f2:	31 05       	cpc	r19, r1
 4f4:	31 f4       	brne	.+12     	; 0x502 <__vector_9+0x58>
		{	
			data = (data<<4);
			data = (data>>4);
 4f6:	8f 70       	andi	r24, 0x0F	; 15
 4f8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <data>
			Play(data);
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	26 df       	rcall	.-436    	; 0x34c <Play>
 500:	b9 c0       	rjmp	.+370    	; 0x674 <__vector_9+0x1ca>

		} else {			
			if (i == 196) 
 502:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <i>
 506:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <i+0x1>
 50a:	24 3c       	cpi	r18, 0xC4	; 196
 50c:	31 05       	cpc	r19, r1
 50e:	39 f4       	brne	.+14     	; 0x51e <__vector_9+0x74>
			{
				USART_Send_Str("error!");
 510:	86 ea       	ldi	r24, 0xA6	; 166
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	e8 dd       	rcall	.-1072   	; 0xe6 <USART_Send_Str>
				USART_Send_Str("limit reached");
 516:	8d ea       	ldi	r24, 0xAD	; 173
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	e5 dd       	rcall	.-1078   	; 0xe6 <USART_Send_Str>
				goto m2;	
 51c:	7f c0       	rjmp	.+254    	; 0x61c <__vector_9+0x172>
			}
			if (data=='p')
 51e:	80 37       	cpi	r24, 0x70	; 112
 520:	89 f5       	brne	.+98     	; 0x584 <__vector_9+0xda>
			{
				if (n!=3)
 522:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 526:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
 52a:	03 97       	sbiw	r24, 0x03	; 3
 52c:	39 f0       	breq	.+14     	; 0x53c <__vector_9+0x92>
				{
					USART_Send_Str("error!");
 52e:	86 ea       	ldi	r24, 0xA6	; 166
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	d9 dd       	rcall	.-1102   	; 0xe6 <USART_Send_Str>
					USART_Send_Str("last note is too short");
 534:	8b eb       	ldi	r24, 0xBB	; 187
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	d6 dd       	rcall	.-1108   	; 0xe6 <USART_Send_Str>
					goto m2;
 53a:	70 c0       	rjmp	.+224    	; 0x61c <__vector_9+0x172>
				}
				i++;
 53c:	c9 01       	movw	r24, r18
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <i+0x1>
 544:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <i>
				buffermel[i]=',';
 548:	fc 01       	movw	r30, r24
 54a:	e0 55       	subi	r30, 0x50	; 80
 54c:	fe 4f       	sbci	r31, 0xFE	; 254
 54e:	2c e2       	ldi	r18, 0x2C	; 44
 550:	20 83       	st	Z, r18
				
				SaveBuff(i);
 552:	4a de       	rcall	.-876    	; 0x1e8 <SaveBuff>
				n=0;
 554:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
 558:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
				for (int ii=0;ii<i;ii++)
 55c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <i>
 560:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <i+0x1>
 564:	18 16       	cp	r1, r24
 566:	19 06       	cpc	r1, r25
 568:	44 f4       	brge	.+16     	; 0x57a <__vector_9+0xd0>
 56a:	e0 eb       	ldi	r30, 0xB0	; 176
 56c:	f1 e0       	ldi	r31, 0x01	; 1
 56e:	80 55       	subi	r24, 0x50	; 80
 570:	9e 4f       	sbci	r25, 0xFE	; 254
				{
					buffermel[ii]=NULL;
 572:	11 92       	st	Z+, r1
				i++;
				buffermel[i]=',';
				
				SaveBuff(i);
				n=0;
				for (int ii=0;ii<i;ii++)
 574:	e8 17       	cp	r30, r24
 576:	f9 07       	cpc	r31, r25
 578:	e1 f7       	brne	.-8      	; 0x572 <__vector_9+0xc8>
				{
					buffermel[ii]=NULL;
				}
				i=0;
 57a:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <i+0x1>
 57e:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <i>
				goto m2;
 582:	4c c0       	rjmp	.+152    	; 0x61c <__vector_9+0x172>
			}
			if (data=='d')
 584:	84 36       	cpi	r24, 0x64	; 100
 586:	c9 f4       	brne	.+50     	; 0x5ba <__vector_9+0x110>
			{
				i--;
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	31 09       	sbc	r19, r1
 58c:	30 93 97 01 	sts	0x0197, r19	; 0x800197 <i+0x1>
 590:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <i>
				if (n==0) {n=3;}else{n--;}
 594:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 598:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
 59c:	00 97       	sbiw	r24, 0x00	; 0
 59e:	39 f4       	brne	.+14     	; 0x5ae <__vector_9+0x104>
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
 5a8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 5ac:	37 c0       	rjmp	.+110    	; 0x61c <__vector_9+0x172>
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
 5b4:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 5b8:	31 c0       	rjmp	.+98     	; 0x61c <__vector_9+0x172>
				goto m2;
			}
			if (n==3)
 5ba:	40 91 92 01 	lds	r20, 0x0192	; 0x800192 <__data_end>
 5be:	50 91 93 01 	lds	r21, 0x0193	; 0x800193 <__data_end+0x1>
 5c2:	43 30       	cpi	r20, 0x03	; 3
 5c4:	51 05       	cpc	r21, r1
 5c6:	49 f4       	brne	.+18     	; 0x5da <__vector_9+0x130>
			{
				if (data!=',')
 5c8:	8c 32       	cpi	r24, 0x2C	; 44
 5ca:	99 f0       	breq	.+38     	; 0x5f2 <__vector_9+0x148>
				{
					USART_Send_Str("error!");
 5cc:	86 ea       	ldi	r24, 0xA6	; 166
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	8a dd       	rcall	.-1260   	; 0xe6 <USART_Send_Str>
					USART_Send_Str("expected ','");
 5d2:	82 ed       	ldi	r24, 0xD2	; 210
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	87 dd       	rcall	.-1266   	; 0xe6 <USART_Send_Str>
					goto m2;	
 5d8:	21 c0       	rjmp	.+66     	; 0x61c <__vector_9+0x172>
				}
			}
			if (data==',')
 5da:	8c 32       	cpi	r24, 0x2C	; 44
 5dc:	79 f4       	brne	.+30     	; 0x5fc <__vector_9+0x152>
			{
				if (n<3)
 5de:	43 30       	cpi	r20, 0x03	; 3
 5e0:	51 05       	cpc	r21, r1
 5e2:	3c f4       	brge	.+14     	; 0x5f2 <__vector_9+0x148>
				{
					USART_Send_Str("error!");
 5e4:	86 ea       	ldi	r24, 0xA6	; 166
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	7e dd       	rcall	.-1284   	; 0xe6 <USART_Send_Str>
					USART_Send_Str("correct note is 3 chr long");
 5ea:	8f ed       	ldi	r24, 0xDF	; 223
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	7b dd       	rcall	.-1290   	; 0xe6 <USART_Send_Str>
					goto m2;
 5f0:	15 c0       	rjmp	.+42     	; 0x61c <__vector_9+0x172>
				}
				n=0;
 5f2:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
 5f6:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
				goto m3;
 5fa:	06 c0       	rjmp	.+12     	; 0x608 <__vector_9+0x15e>
			}

			n++;
 5fc:	4f 5f       	subi	r20, 0xFF	; 255
 5fe:	5f 4f       	sbci	r21, 0xFF	; 255
 600:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <__data_end+0x1>
 604:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <__data_end>
m3:			buffermel[i]=data;
 608:	f9 01       	movw	r30, r18
 60a:	e0 55       	subi	r30, 0x50	; 80
 60c:	fe 4f       	sbci	r31, 0xFE	; 254
 60e:	80 83       	st	Z, r24
			i++;	
 610:	2f 5f       	subi	r18, 0xFF	; 255
 612:	3f 4f       	sbci	r19, 0xFF	; 255
 614:	30 93 97 01 	sts	0x0197, r19	; 0x800197 <i+0x1>
 618:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <i>
m2:			USART_Send_Str("melody:");	
 61c:	8a ef       	ldi	r24, 0xFA	; 250
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	62 dd       	rcall	.-1340   	; 0xe6 <USART_Send_Str>
			for (q=0; q<i; q++){USART_Send_Char(buffermel[q]);}
 622:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <q+0x1>
 626:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <q>
 62a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <i>
 62e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <i+0x1>
 632:	18 16       	cp	r1, r24
 634:	19 06       	cpc	r1, r25
 636:	f4 f4       	brge	.+60     	; 0x674 <__vector_9+0x1ca>
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	fc 01       	movw	r30, r24
 63e:	e0 55       	subi	r30, 0x50	; 80
 640:	fe 4f       	sbci	r31, 0xFE	; 254
 642:	80 81       	ld	r24, Z
 644:	4c dd       	rcall	.-1384   	; 0xde <USART_Send_Char>
 646:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <q>
 64a:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <q+0x1>
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <q+0x1>
 654:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <q>
 658:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <i>
 65c:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <i+0x1>
 660:	82 17       	cp	r24, r18
 662:	93 07       	cpc	r25, r19
 664:	5c f3       	brlt	.-42     	; 0x63c <__vector_9+0x192>
 666:	06 c0       	rjmp	.+12     	; 0x674 <__vector_9+0x1ca>
		}
	} else 
	{
		USART_Send_Str("error!");
 668:	86 ea       	ldi	r24, 0xA6	; 166
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	3c dd       	rcall	.-1416   	; 0xe6 <USART_Send_Str>
		USART_Send_Str("Put numbers 1..7");
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	39 dd       	rcall	.-1422   	; 0xe6 <USART_Send_Str>
	}
}
 674:	ff 91       	pop	r31
 676:	ef 91       	pop	r30
 678:	bf 91       	pop	r27
 67a:	af 91       	pop	r26
 67c:	9f 91       	pop	r25
 67e:	8f 91       	pop	r24
 680:	7f 91       	pop	r23
 682:	6f 91       	pop	r22
 684:	5f 91       	pop	r21
 686:	4f 91       	pop	r20
 688:	3f 91       	pop	r19
 68a:	2f 91       	pop	r18
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <main>:
	unsigned char count;
	unsigned char temp;
	unsigned char countc;
	unsigned char tempc;

	port_ini();
 696:	fe de       	rcall	.-516    	; 0x494 <port_ini>
	USART_ini(12);
 698:	8c e0       	ldi	r24, 0x0C	; 12
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	18 dd       	rcall	.-1488   	; 0xce <USART_ini>
	sei();
 69e:	78 94       	sei
	mode = 0;
 6a0:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <mode+0x1>
 6a4:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <mode>
	PORTA=mode+1;
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	8b bb       	out	0x1b, r24	; 27
					PORTA=mode+1;
				}
				if (countc==2)
				{
					if (mode==0){ChangeTempo(0);PORTA=mode+1;}
					else {ChangeOctave(0);PORTA=mode+1;}
 6ac:	c4 e1       	ldi	r28, 0x14	; 20
 6ae:	d2 e0       	ldi	r29, 0x02	; 2
	sei();
	mode = 0;
	PORTA=mode+1;
	while (1)
	{	
		m1:	tempc=PINC;
 6b0:	03 b3       	in	r16, 0x13	; 19
 6b2:	11 e0       	ldi	r17, 0x01	; 1
 6b4:	e1 2c       	mov	r14, r1
 6b6:	f1 2c       	mov	r15, r1
		for (countc=0; countc<4; countc++)
		{
			if ((tempc&1)==0) {
 6b8:	00 fd       	sbrc	r16, 0
 6ba:	34 c0       	rjmp	.+104    	; 0x724 <main+0x8e>
 6bc:	8e 2d       	mov	r24, r14
				if (countc<2){
 6be:	82 30       	cpi	r24, 0x02	; 2
 6c0:	28 f4       	brcc	.+10     	; 0x6cc <main+0x36>
					mode = countc;
 6c2:	f0 92 15 02 	sts	0x0215, r15	; 0x800215 <mode+0x1>
 6c6:	e0 92 14 02 	sts	0x0214, r14	; 0x800214 <mode>
					PORTA=mode+1;
 6ca:	1b bb       	out	0x1b, r17	; 27
				}
				if (countc==2)
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	a1 f4       	brne	.+40     	; 0x6f8 <main+0x62>
				{
					if (mode==0){ChangeTempo(0);PORTA=mode+1;}
 6d0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <mode>
 6d4:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <mode+0x1>
 6d8:	89 2b       	or	r24, r25
 6da:	39 f4       	brne	.+14     	; 0x6ea <main+0x54>
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	1b dd       	rcall	.-1482   	; 0x118 <ChangeTempo>
 6e2:	88 81       	ld	r24, Y
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	8b bb       	out	0x1b, r24	; 27
 6e8:	1d c0       	rjmp	.+58     	; 0x724 <main+0x8e>
					else {ChangeOctave(0);PORTA=mode+1;}
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	48 dd       	rcall	.-1392   	; 0x180 <ChangeOctave>
 6f0:	88 81       	ld	r24, Y
 6f2:	8f 5f       	subi	r24, 0xFF	; 255
 6f4:	8b bb       	out	0x1b, r24	; 27
 6f6:	16 c0       	rjmp	.+44     	; 0x724 <main+0x8e>
				}
				if (countc==3)
 6f8:	83 30       	cpi	r24, 0x03	; 3
 6fa:	a1 f4       	brne	.+40     	; 0x724 <main+0x8e>
				{
					if (mode==0){ChangeTempo(1);PORTA=mode+1;}
 6fc:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <mode>
 700:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <mode+0x1>
 704:	89 2b       	or	r24, r25
 706:	39 f4       	brne	.+14     	; 0x716 <main+0x80>
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	05 dd       	rcall	.-1526   	; 0x118 <ChangeTempo>
 70e:	88 81       	ld	r24, Y
 710:	8f 5f       	subi	r24, 0xFF	; 255
 712:	8b bb       	out	0x1b, r24	; 27
 714:	0e c0       	rjmp	.+28     	; 0x732 <main+0x9c>
					else {ChangeOctave(1);PORTA=mode+1;}
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	32 dd       	rcall	.-1436   	; 0x180 <ChangeOctave>
 71c:	88 81       	ld	r24, Y
 71e:	8f 5f       	subi	r24, 0xFF	; 255
 720:	8b bb       	out	0x1b, r24	; 27
 722:	07 c0       	rjmp	.+14     	; 0x732 <main+0x9c>
				}
			}
			tempc >>= 1;
 724:	06 95       	lsr	r16
 726:	8f ef       	ldi	r24, 0xFF	; 255
 728:	e8 1a       	sub	r14, r24
 72a:	f8 0a       	sbc	r15, r24
 72c:	1f 5f       	subi	r17, 0xFF	; 255
	mode = 0;
	PORTA=mode+1;
	while (1)
	{	
		m1:	tempc=PINC;
		for (countc=0; countc<4; countc++)
 72e:	15 30       	cpi	r17, 0x05	; 5
 730:	19 f6       	brne	.-122    	; 0x6b8 <main+0x22>
					else {ChangeOctave(1);PORTA=mode+1;}
				}
			}
			tempc >>= 1;
		}
		temp=PINB;
 732:	96 b3       	in	r25, 0x16	; 22
		
		for (count=0; count<8; count++)
		{
			if ((temp&1)==0) {
 734:	90 fd       	sbrc	r25, 0
 736:	46 c0       	rjmp	.+140    	; 0x7c4 <main+0x12e>
 738:	3e c0       	rjmp	.+124    	; 0x7b6 <main+0x120>
 73a:	90 fd       	sbrc	r25, 0
 73c:	37 c0       	rjmp	.+110    	; 0x7ac <main+0x116>
				if (mode==1) {
 73e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <mode>
 742:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <mode+0x1>
 746:	01 97       	sbiw	r24, 0x01	; 1
 748:	39 f4       	brne	.+14     	; 0x758 <main+0xc2>
 74a:	01 c0       	rjmp	.+2      	; 0x74e <main+0xb8>
			}
			tempc >>= 1;
		}
		temp=PINB;
		
		for (count=0; count<8; count++)
 74c:	e0 e0       	ldi	r30, 0x00	; 0
		{
			if ((temp&1)==0) {
				if (mode==1) {
					count++;
					Play(count);
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	8e 0f       	add	r24, r30
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	fb dd       	rcall	.-1034   	; 0x34c <Play>
					goto m1;
 756:	ac cf       	rjmp	.-168    	; 0x6b0 <main+0x1a>
				} else {
					switch (count)
 758:	8e 2f       	mov	r24, r30
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	88 30       	cpi	r24, 0x08	; 8
 75e:	91 05       	cpc	r25, r1
 760:	08 f0       	brcs	.+2      	; 0x764 <main+0xce>
 762:	a6 cf       	rjmp	.-180    	; 0x6b0 <main+0x1a>
 764:	fc 01       	movw	r30, r24
 766:	ef 5e       	subi	r30, 0xEF	; 239
 768:	ff 4f       	sbci	r31, 0xFF	; 255
 76a:	09 94       	ijmp
					{
						case 0:
						{
							PlayMel(&mel0[0]);
 76c:	81 e6       	ldi	r24, 0x61	; 97
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	11 de       	rcall	.-990    	; 0x394 <PlayMel>
						}
						break;
 772:	9e cf       	rjmp	.-196    	; 0x6b0 <main+0x1a>
						case 1:
						{
							PlayMel(&mel1[0]);
 774:	8c e4       	ldi	r24, 0x4C	; 76
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	0d de       	rcall	.-998    	; 0x394 <PlayMel>
						}
						break;
 77a:	9a cf       	rjmp	.-204    	; 0x6b0 <main+0x1a>
						case 2:
						{
							PlayMel(&mel2[0]);
 77c:	8b e3       	ldi	r24, 0x3B	; 59
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	09 de       	rcall	.-1006   	; 0x394 <PlayMel>
						}
						break;
 782:	96 cf       	rjmp	.-212    	; 0x6b0 <main+0x1a>
						case 3:
						{
							PlayMel(&mel3[0]);
 784:	83 e1       	ldi	r24, 0x13	; 19
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	05 de       	rcall	.-1014   	; 0x394 <PlayMel>
						}
						break;
 78a:	92 cf       	rjmp	.-220    	; 0x6b0 <main+0x1a>
						case 4:
						{
							PlayMel(&mel4[0]);
 78c:	85 e3       	ldi	r24, 0x35	; 53
 78e:	92 e0       	ldi	r25, 0x02	; 2
 790:	01 de       	rcall	.-1022   	; 0x394 <PlayMel>
						}
						break;
 792:	8e cf       	rjmp	.-228    	; 0x6b0 <main+0x1a>
						case 5:
						{
							PlayMel(&mel5[0]);
 794:	86 e1       	ldi	r24, 0x16	; 22
 796:	92 e0       	ldi	r25, 0x02	; 2
 798:	fd dd       	rcall	.-1030   	; 0x394 <PlayMel>
						}
						break;
 79a:	8a cf       	rjmp	.-236    	; 0x6b0 <main+0x1a>
						case 6:
						{
							PlayMel(&mel6[0]);
 79c:	8c e9       	ldi	r24, 0x9C	; 156
 79e:	91 e0       	ldi	r25, 0x01	; 1
 7a0:	f9 dd       	rcall	.-1038   	; 0x394 <PlayMel>
						}
						break;
 7a2:	86 cf       	rjmp	.-244    	; 0x6b0 <main+0x1a>
						case 7:
						{
							PlayMel(&mel7[0]);
 7a4:	8b e2       	ldi	r24, 0x2B	; 43
 7a6:	92 e0       	ldi	r25, 0x02	; 2
 7a8:	f5 dd       	rcall	.-1046   	; 0x394 <PlayMel>
						}
						break;
 7aa:	82 cf       	rjmp	.-252    	; 0x6b0 <main+0x1a>
					}
					goto m1;
					}
				}
			temp >>= 1;
 7ac:	96 95       	lsr	r25
			}
			tempc >>= 1;
		}
		temp=PINB;
		
		for (count=0; count<8; count++)
 7ae:	ef 5f       	subi	r30, 0xFF	; 255
 7b0:	e8 30       	cpi	r30, 0x08	; 8
 7b2:	19 f6       	brne	.-122    	; 0x73a <main+0xa4>
 7b4:	7d cf       	rjmp	.-262    	; 0x6b0 <main+0x1a>
		{
			if ((temp&1)==0) {
				if (mode==1) {
 7b6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <mode>
 7ba:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <mode+0x1>
 7be:	01 97       	sbiw	r24, 0x01	; 1
 7c0:	a9 f6       	brne	.-86     	; 0x76c <main+0xd6>
 7c2:	c4 cf       	rjmp	.-120    	; 0x74c <main+0xb6>
						break;
					}
					goto m1;
					}
				}
			temp >>= 1;
 7c4:	96 95       	lsr	r25
			}
			tempc >>= 1;
		}
		temp=PINB;
		
		for (count=0; count<8; count++)
 7c6:	e1 e0       	ldi	r30, 0x01	; 1
 7c8:	b8 cf       	rjmp	.-144    	; 0x73a <main+0xa4>

000007ca <__udivmodhi4>:
 7ca:	aa 1b       	sub	r26, r26
 7cc:	bb 1b       	sub	r27, r27
 7ce:	51 e1       	ldi	r21, 0x11	; 17
 7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <__udivmodhi4_ep>

000007d2 <__udivmodhi4_loop>:
 7d2:	aa 1f       	adc	r26, r26
 7d4:	bb 1f       	adc	r27, r27
 7d6:	a6 17       	cp	r26, r22
 7d8:	b7 07       	cpc	r27, r23
 7da:	10 f0       	brcs	.+4      	; 0x7e0 <__udivmodhi4_ep>
 7dc:	a6 1b       	sub	r26, r22
 7de:	b7 0b       	sbc	r27, r23

000007e0 <__udivmodhi4_ep>:
 7e0:	88 1f       	adc	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	5a 95       	dec	r21
 7e6:	a9 f7       	brne	.-22     	; 0x7d2 <__udivmodhi4_loop>
 7e8:	80 95       	com	r24
 7ea:	90 95       	com	r25
 7ec:	bc 01       	movw	r22, r24
 7ee:	cd 01       	movw	r24, r26
 7f0:	08 95       	ret

000007f2 <atoi>:
 7f2:	fc 01       	movw	r30, r24
 7f4:	88 27       	eor	r24, r24
 7f6:	99 27       	eor	r25, r25
 7f8:	e8 94       	clt
 7fa:	21 91       	ld	r18, Z+
 7fc:	20 32       	cpi	r18, 0x20	; 32
 7fe:	e9 f3       	breq	.-6      	; 0x7fa <atoi+0x8>
 800:	29 30       	cpi	r18, 0x09	; 9
 802:	10 f0       	brcs	.+4      	; 0x808 <atoi+0x16>
 804:	2e 30       	cpi	r18, 0x0E	; 14
 806:	c8 f3       	brcs	.-14     	; 0x7fa <atoi+0x8>
 808:	2b 32       	cpi	r18, 0x2B	; 43
 80a:	39 f0       	breq	.+14     	; 0x81a <atoi+0x28>
 80c:	2d 32       	cpi	r18, 0x2D	; 45
 80e:	31 f4       	brne	.+12     	; 0x81c <atoi+0x2a>
 810:	68 94       	set
 812:	03 c0       	rjmp	.+6      	; 0x81a <atoi+0x28>
 814:	0b d0       	rcall	.+22     	; 0x82c <__mulhi_const_10>
 816:	82 0f       	add	r24, r18
 818:	91 1d       	adc	r25, r1
 81a:	21 91       	ld	r18, Z+
 81c:	20 53       	subi	r18, 0x30	; 48
 81e:	2a 30       	cpi	r18, 0x0A	; 10
 820:	c8 f3       	brcs	.-14     	; 0x814 <atoi+0x22>
 822:	1e f4       	brtc	.+6      	; 0x82a <atoi+0x38>
 824:	90 95       	com	r25
 826:	81 95       	neg	r24
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__mulhi_const_10>:
 82c:	7a e0       	ldi	r23, 0x0A	; 10
 82e:	97 9f       	mul	r25, r23
 830:	90 2d       	mov	r25, r0
 832:	87 9f       	mul	r24, r23
 834:	80 2d       	mov	r24, r0
 836:	91 0d       	add	r25, r1
 838:	11 24       	eor	r1, r1
 83a:	08 95       	ret

0000083c <_exit>:
 83c:	f8 94       	cli

0000083e <__stop_program>:
 83e:	ff cf       	rjmp	.-2      	; 0x83e <__stop_program>
